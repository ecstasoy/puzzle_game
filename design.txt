Design description for Puzzle Game
CS5001 final project
Kunhua Huang
002836817
-------------------------------

File structure:
├── Images
│         ├── (puzzle name)
│         │         └──xxx.gif
│
├── Resources
│         └── xxx.gif
├── board.py
├── constants.py
├── file_manager.py
├── game.py
├── gameUI.py
├── leaderboard.py
├── puzzle_game.py
├── test_module.py
├── tile.py
├── design.txt
├── leaderboard.txt
├── 5001_puzzle.err
└── xxx.puz

All files in the directory reflects a comprehensive design of a puzzle game program. The program, which will be entered
through puzzle_game.py, is a (semi? I am not so sure :) ) adaptation of Model-Controller-View architectural pattern.

Model: FileManager class manages all data-related operations and is needed by almost all other classes. In order to
ensure the class only have one instance throughout the execution of the program, Singleton Design Pattern is implemented.
Tile class represents a tile in the entire board, with storage of its location and drawing method using turtle package.

View: GameUI class provides most visual elements in the game. It initializes the game screen, handles user inputs
through dialogs, and updates the display (e.g., tiles, buttons, leaderboard).

Controller: Board class contains the logic of how the tiles are arranged, the rules of moving the blank tiles, and the
control of interaction between different classes. When user make a move, the callback function will notify Game and
GameUI to update the game status and corresponding display. Game class coordinates interactions between the UI and
the model.

All the constants are stored in constants.py, including the screen size, tile size, the number of tiles in a row, and
the path of the image file. The leaderboard is stored in leaderboard.txt, which is a text file that stores all the
information of the players and their scores. The file is read and written by the Leaderboard class.

BONUS POINTS:
1. Board.is_solvable() method is implemented to check if the puzzle is solvable. The method is called in the Board class
when the puzzle is initialized. This status will be displayed in the game screen ui.
2. Board.scramble() method is initially implemented to shuffle the tiles and the solvability of the puzzle is not
guaranteed. If we change the real_scramble() in initialize_tiles() (Line 93) to scramble(), we may notice the status
changed to 'No' when a new puzzle is loaded (can take several times to see the change).
3. A PyUnit test is included in test_module.py to test the is_solvable() method in the Board class.
4. Board.real_scramble() method is implemented to shuffle the tiles and guarantee the solvability of the puzzle.
A PyUnit test is also included in test_module.py.